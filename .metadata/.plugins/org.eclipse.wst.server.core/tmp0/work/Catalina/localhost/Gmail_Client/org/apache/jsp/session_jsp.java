/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.109
 * Generated at: 2023-12-17 08:15:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.RequestBuilder;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicHeader;
import org.apache.http.util.EntityUtils;
import org.apache.commons.codec.binary.Base64;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public final class session_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t");

	String code = (String)request.getParameter("code");
	String scope = (String)request.getParameter("scope");
	String session_state = (String)request.getParameter("session_state");
	String prompt = (String)request.getParameter("prompt");
	
      out.write("\r\n");
      out.write("\t<h3>Step 1: Google Sign-in result</h3>\r\n");
      out.write("\tcode: ");
      out.print(code );
      out.write("<br>\r\n");
      out.write("\tscope: ");
      out.print(scope );
      out.write("<br>\r\n");
      out.write("\tsession_state: ");
      out.print(session_state );
      out.write("<br>\r\n");
      out.write("\tprompt: ");
      out.print(prompt );
      out.write("<br>\r\n");
      out.write("\t\r\n");
      out.write("\t");

	String client_id = "647784098084-6t1bqntkr7m2csq9dbrog1hv5h56b4hd.apps.googleusercontent.com";
	String client_secret = "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";
	CloseableHttpClient httpClient = HttpClients.createDefault();
	HttpPost httpPost = new HttpPost("https://www.googleapis.com/oauth2/v4/token");
	httpPost.setHeader("content-type", "application/x-www-form-urlencoded");
	String request_body = "grant_type=authorization_code&" +
						"code=" + code +
						"&client_id=647784098084-6t1bqntkr7m2csq9dbrog1hv5h56b4hd.apps.googleusercontent.com" +
						"&client_secret=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" +
						"&redirect_uri=http%3A%2F%2Flocalhost%3A8080%2FGoogle_OAuth%2Fsession.jsp";
	StringEntity entity = new StringEntity(request_body);
	httpPost.setEntity(entity);
	
	CloseableHttpResponse resp = httpClient.execute(httpPost);
	String return_body = EntityUtils.toString(resp.getEntity());
	JsonParser parser = new JsonParser();
	JsonElement jsonTree = parser.parse(return_body);
	String access_token = jsonTree.getAsJsonObject().get("access_token").toString();
	String expires_in = jsonTree.getAsJsonObject().get("expires_in").toString();
	String scope2 = jsonTree.getAsJsonObject().get("scope").toString();
	String token_type = jsonTree.getAsJsonObject().get("token_type").toString();
	String id_token = jsonTree.getAsJsonObject().get("id_token").toString();
	
      out.write("\t\t\t\t\r\n");
      out.write("\t\r\n");
      out.write("\t<h3>Step 2: Making call to Google OAuth server:</h3>\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t<li>client_id: ");
      out.print( client_id );
      out.write("</li>\r\n");
      out.write("\t<li>client_secret: ");
      out.print( client_secret );
      out.write("</li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t<h4>Got return from server:</h4>\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t");
      out.print( return_body );
      out.write("\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t<h4>Decode return values:</h4>\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t<li>access_token: ");
      out.print( access_token );
      out.write("</li>\r\n");
      out.write("\t<li>expires_in: ");
      out.print( expires_in );
      out.write("</li>\r\n");
      out.write("\t<li>scope: ");
      out.print( scope2 );
      out.write("</li>\r\n");
      out.write("\t<li>token_type: ");
      out.print( token_type );
      out.write("</li>\r\n");
      out.write("\t<li>id_token: ");
      out.print( id_token );
      out.write("</li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t");

			Base64 base64Url = new Base64(true);
			String[] split_string = id_token.split("\\.");
			String header = new String(base64Url.decode(split_string[0]));
			String body = new String(base64Url.decode(split_string[1]));
			String signature = new String(base64Url.decode(split_string[2]));
			
      out.write("\r\n");
      out.write("\t<h4>Decode id_token</h4>\r\n");
      out.write("\t<ul>\r\n");
      out.write("\t<li>header: ");
      out.print( header );
      out.write("</li>\r\n");
      out.write("\t<li>body: ");
      out.print( body );
      out.write("</li>\r\n");
      out.write("\t<li>signature: ");
      out.print( signature );
      out.write("</li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t\r\n");
      out.write("\t");

	jsonTree = parser.parse(body);
	String email = jsonTree.getAsJsonObject().get("email").toString();
	
      out.write("\r\n");
      out.write("\t<a href=\"work.jsp\">Continue working with Google account: ");
      out.print( email);
      out.write("</a>\r\n");
      out.write("\t");

	Cookie cookie = new Cookie("session_id",email);
	cookie.setMaxAge(60*60*24);
	response.addCookie(cookie);
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
